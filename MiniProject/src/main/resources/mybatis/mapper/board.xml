<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.team.proj.board.dao.BoardDAO">
	<!-- <sql id=boardSearch"> <if test="searchWord != null"> <choose> <when 
		test="searchOption=='order_title'">AND a.order_title LIKE '%' || #{searchWord} 
		|| '%'</when> <when test="searchOption=='order_content'">AND a.order_content 
		LIKE '%' || #{searchWord} || '%'</when> <when test="searchOption=='entp_name'">AND 
		b.entp_name LIKE '%' || #{searchWord} || '%'</when> </choose> </if> </sql> -->

	<!-- 글 한개만 가져오기 -->
	<select id="getBoard" parameterType="int"
		resultType="com.team.proj.board.dto.BoardDTO">
		SELECT
		b.order_no,
		b.request_date,
		b.order_title,
		b.order_content,
		a.mem_id,
		b.calc_id,
		a.entp_name,
		b.calc_result,
		b.request_date,
		b.feedback_yn,
		b.del_yn
		FROM BOARDS b, MEMBERS a
		WHERE
		b.mem_id = a.mem_id(+)
		AND b.order_no =
		#{orderNo}
	</select>

	<!-- 글쓰기 (INSERT) -->
	<insert id="insertBoard"
		parameterType="com.team.proj.board.dto.BoardDTO">
		INSERT INTO order_board (request_date, order_title,
		order_content,
		mem_id, feedback_yn)
		VALUES (#{requestDate},
		#{orderTitle}, #{orderContent}, #{memId},
		#{feedbackYn})
	</insert>

	<!-- 글 수정 (UPDATE) -->
	<update id="updateBoard"
		parameterType="com.team.proj.board.dto.BoardDTO">
		UPDATE order_board
		SET order_title = #{orderTitle},
		order_content = #{orderContent}
		WHERE order_no = #{orderNo}
	</update>

	<!-- 글 삭제 (UPDATE) -->
	<update id="deleteBoard" parameterType="int">
		UPDATE order_board
		SET
		del_yn = 'Y'
		WHERE order_no = #{no}
	</update>

	<!-- 게시글 작성 -->
	<insert id="boardWriteDo"
		parameterType="com.team.proj.board.dto.BoardDTO">
		INSERT INTO BOARDS(
		board_id,
		order_no,
		mem_id,
		calc_id,
		calc_result,
		order_title,
		order_content,
		request_date,
		feedback_yn,
		del_yn,
		entp_name
		)VALUES(
		#{boardId},
		seq_board.nextval,
		#{memId},
		#{calcId},
		#{calcResult},
		#{orderTitle},
		#{orderContent},
		SYSDATE,
		'N',
		'N',
		#{entpName}
		)
	</insert>
	
	<!-- 게시글 목록 가져오기 -->
	<select id="getBoardList"
		parameterType="com.team.proj.board.vo.SearchVO"
		resultType="com.team.proj.board.dto.BoardDTO">
		SELECT * FROM (
		SELECT
		a.*
		, ROWNUM AS RNUM
		FROM (
		SELECT
		a.order_no
		,
		a.order_title
		, a.mem_id
		, b.entp_name
		, a.order_content
		, a.request_date
		, a.feedback_yn
		FROM boards a, members b
		WHERE 1=1
		AND a.mem_id =
		b.mem_id
		AND a.del_yn = 'N'
		<if test="feedbackYn != null">
			AND a.feedback_yn = #{feedbackYn}
		</if>
		<if test="searchWord != null">
			<choose>
				<when test="searchOption=='title'">AND a.order_title LIKE '%' || #{searchWord} || '%'
				</when>
				<when test="searchOption=='content'">AND a.order_content LIKE '%' || #{searchWord} || '%'
				</when>
				<when test="searchOption=='company'">AND a.entp_name LIKE '%' || #{searchWord} || '%'
				</when>
			</choose>
		</if>
		ORDER BY order_no DESC
		) a
		)
		WHERE rnum BETWEEN #{start} AND #{end}
	</select>
	
	<!-- 회원아이디로 게시글 불러오기 -->
	<select id="getBoardListById" parameterType="com.team.proj.board.vo.SearchVO"
		resultType="com.team.proj.board.dto.BoardDTO">
				SELECT * FROM (
		SELECT
		a.*
		, ROWNUM AS RNUM
		FROM (
		SELECT
		board_id,
		order_no,
		mem_id,
		calc_id,
		calc_result,
		order_title,
		order_content,
		TO_CHAR(request_date, 'YYYY-MM-DD HH24:MI') AS
		request_date ,
		feedback_yn,
		del_yn,
		entp_name
		FROM BOARDS
		WHERE 1=1
		<if test="memId != 'admin'">
			AND MEM_ID = #{memId}
		</if>
		ORDER BY ORDER_NO DESC
		) a
		)
		WHERE rnum BETWEEN #{start} AND #{end}
	</select>

	<select id="getBoardListByIdConfirm"
		parameterType="com.team.proj.board.dto.BoardDTO"
		resultType="com.team.proj.board.dto.BoardDTO">
		SELECT
		board_id,
		order_no,
		mem_id,
		calc_id,
		calc_result,
		order_title,
		order_content,
		TO_CHAR(request_date, 'YYYY-MM-DD HH24:MI') AS
		request_date ,
		feedback_yn,
		del_yn,
		entp_name
		FROM BOARDS
		WHERE 1=1
		<if test="feedbackYn != null">
			AND feedback_yn = #{feedbackYn}
		</if>
		ORDER BY ORDER_NO DESC
	</select>

	<select id="getBoardByNo" parameterType="int"
		resultType="com.team.proj.board.dto.BoardDTO">
		SELECT
		board_id,
		order_no,
		mem_id,
		calc_id,
		calc_result,
		order_title,
		order_content,
		TO_CHAR(request_date, 'YYYY-MM-DD HH24:MI') AS request_date ,
		feedback_yn,
		del_yn,
		entp_name
		FROM BOARDS
		WHERE 1=1
		AND ORDER_NO = #{boardNo}
	</select>

	<update id="updateFeedbackYN" parameterType="int">
		UPDATE BOARDS
		SET
		feedback_yn = 'Y'
		WHERE ORDER_NO = #{boardNo}
	</update>


	<!-- totalRowCount에 대한 쿼리문 -->
	<!-- 조건에 일치하는 게시물 불러오기 -->
	<!-- 조건에 일치하는 게시물 불러오기 -->
	<select id="getBoardCount"
		parameterType="com.team.proj.board.vo.SearchVO" resultType="int">
		SELECT
		COUNT(*)
		FROM boards a, members b
		WHERE 1=1
		AND a.mem_id = b.mem_id
		AND a.del_yn = 'N'

		<!-- 검색어가 있을 경우 검색 조건을 적용 -->
		<if test="searchWord != null">
			<choose>
				<when test="searchOption == 'title'">
					AND a.order_title LIKE '%' || #{searchWord} || '%'
				</when>
				<when test="searchOption == 'content'">
					AND a.order_content LIKE '%' || #{searchWord} || '%'
				</when>
				<when test="searchOption == 'company'">
					AND b.entp_name LIKE '%' || #{searchWord} || '%'
				</when>
			</choose>
		</if>

		<!-- feedbackYn 조건이 있을 경우 추가 -->
		<if test="feedbackYn != null">
			AND a.feedback_yn = #{feedbackYn}
		</if>
	</select>

	<select id="getBoardCountById"
		parameterType="com.team.proj.board.vo.SearchVO" resultType="int">
		SELECT
		COUNT(*)
		FROM boards
		WHERE 1=1
		AND mem_id = #{memId}
		AND del_yn = 'N'
		
		
	</select>

	<select id="getCalcResult" resultType="double" parameterType="String">
		select 
		NVL(sum(calc_result),0) as calc_result
		from boards
		where mem_id = #{memId}
		and feedback_yn = 'Y'
	</select>
	
	
	
	
</mapper>
